{"version":3,"sources":["../node_modules/pyodide/node_modules/node-fetch/browser.js"],"names":["global","globalObject","self","window","Error","getGlobal","module","exports","fetch","default","bind","Headers","Request","Response"],"mappings":"2FAAA,SAAAA,GAEA,IAmBAC,EAnBA,WAIA,wBAAAC,KACA,OAAAA,KAGA,wBAAAC,OACA,OAAAA,OAGA,wBAAAH,EACA,OAAAA,EAGA,UAAAI,MAAA,kCAGAC,GACAC,EAAAC,UAAAN,EAAAO,MAEAP,EAAAO,QACAD,EAAAE,QAAAR,EAAAO,MAAAE,KAAAV,IAGAO,EAAAI,QAAAV,EAAAU,QACAJ,EAAAK,QAAAX,EAAAW,QACAL,EAAAM,SAAAZ,EAAAY","file":"static/js/3.f4071acd.chunk.js","sourcesContent":["\"use strict\"; // ref: https://github.com/tc39/proposal-global\n\nvar getGlobal = function getGlobal() {\n  // the only reliable means to get the global object is\n  // `Function('return this')()`\n  // However, this causes CSP violations in Chrome apps.\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n\n  throw new Error('unable to locate global object');\n};\n\nvar globalObject = getGlobal();\nmodule.exports = exports = globalObject.fetch; // Needed for TypeScript and Webpack.\n\nif (globalObject.fetch) {\n  exports.default = globalObject.fetch.bind(global);\n}\n\nexports.Headers = globalObject.Headers;\nexports.Request = globalObject.Request;\nexports.Response = globalObject.Response;"],"sourceRoot":""}